# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  access_key: ${{secrets.AWS_ACCESS_KEY}}
  secret_key: ${{secrets.AWS_SECRET_KEY}}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
      
    # Set Up The Java 
    - name: Setup JDK 1.8
      uses: actions/checkout@v3
      with:
        java-version: 1.8  
    - name: Build Code
      run: mvn -B package --file pom.xml
    #- name: Cache SonarCloud packages
    #  uses: actions/cache@v1
     # with:
      #   path: ~/.sonar/cache
       #  key: ${{ runner.os }}-sonar
        # restore-keys: ${{ runner.os }}-sonar
    #- name: Cache Maven packages
     # uses: actions/cache@v1
      #with:
       # path: ~/.m2
        #key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        #restore-keys: ${{ runner.os }}-m2
   # - name: Sonar Scanner
     # uses: SonarSource/sonarcloud-github-action@master
     # env:
     #  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #  run: mvn -B package org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ankupsatpute_aws-repo-terraform
    
    - name: Nexus Repo Publish
      uses: sonatype-nexus-community/nexus-repo-github-action@master
      with:
        serverUrl: http://43.205.113.31:8081/repository/sample/
        username: admin
        password: ${{ secrets.NEXUS_PASSWORD }}
        format: maven2
        repository: maven-releases
        coordinates: groupId=in.javahome artifactId=simple-app version=2.0.0
        assets: extension=war
        filename: ./target/simple-app-2.0.0.war
         
   
